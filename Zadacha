Задача
Иметь возможность доступа из текущего объекта к любому объекту системы, «мечта» разработчика программы.
В составе базового класса реализовать метод получения указателя на любой объект в составе дерева иерархии объектов согласно пути (координаты). В качестве параметра методу передать путь (координату) объекта. Координата задается в следующем виде:
/                  - корневой объект;
//«имя объекта»    - поиск объекта по уникальному имени от корневого (для однозначности уникальность требуется в рамках дерева);
.                  - текущий объект;
«имя объекта 1»[/«имя объекта 2»] . . .    - относительная координата от текущего объекта, «имя объекта 1» подчиненный текущего;
/«имя объекта 1»[/«имя объекта 2»] . . .   - абсолютная координата от корневого объекта.
Примеры координат:
/
//ob_3
.
ob_2/ob_3
ob_2
/ob_1/ob_2/ob_3

Если координата пустая строка или объект не найден, то вернуть нулевой указатель.

Система содержит объекты пяти классов, не считая корневого. Номера классов: 2,3,4,5,6.

Состав и иерархия объектов строиться посредством ввода исходных данных.  Ввод организован как в версии № 2 курсовой работы. 
Единственное различие, в строке ввода первым указано не наименование головного объекта, а абсолютный путь к нему.
При построении дерева уникальность наименования относительно множества непосредственно подчиненных объектов для любого головного объекта соблюдены.  
Добавить проверку допустимости исходной сборки. Собрать дерево невозможно, если по заданной координате головной объект не найден (например, ошибка в наименовании или еще не расположен на дереве объектов).

Система отрабатывает следующие команды:
SET «координата»  – устанавливает текущий объект;
FIND «координата» – находит объект относительно текущего;
END               – завершает функционирование системы (выполнение программы).
Изначально, корневой объект для системы является текущим.
При вводе данных в названии команд ошибок нет. Условия уникальности имен объектов для однозначной отработки соответствующих команд соблюдены.

При решении задачи необходимо руководствоваться методическим пособием и приложением к методическому пособию

Входные данные
Состав и иерархия объектов строится посредством ввода исходных данных.  Ввод организован как в версии № 2 курсовой работы. 
Единственное различие, в строке ввода первым указано не наименование головного объекта, а абсолютный путь к нему.

После ввода состава дерева иерархии построчно вводятся команды:
SET координата  - установить текущий объект;
FIND координата - найти объект относительно текущего;
END               – завершить функционирование системы (выполнение программы).
Команды SET и FIND вводятся произвольное число раз. Команда END присутствует обязательно.

Пример ввода иерархии дерева объектов.
root
/ object_1 3
/ object_2 2
/object_2 object_4 3
/object_2 object_5 4
/ object_3 3
/object_2 object_3 6
/object_1 object_7 5
/object_2/object_4 object_7 3
endtree
FIND object_2/object_4
SET /object_2
FIND //object_5
FIND /object_15
FIND .
FIND object_4/object_7
END

Выходные данные
Первая строка:
Object tree
Со второй строки вывести иерархию построенного дерева как в курсовой работе версия №2.

При ошибке определения головного объекта, прекратить сборку, вывести иерархию уже построенного фрагмента дерева, со следующей строки сообщение:
The head object координата головного объекта is not found
и прекратить работу программы.

Если дерево построено, то далее построчно:
для команд SET если объект найден, то вывести:
Object is set: имя объекта
в противном случае:
Object is not found: имя текущего объекта искомая координата объекта

для команд FIND вывести:
искомая координата объекта     Object name: наименование объекта
Если объект не найден, то:
искомая координата объекта     Object is not found


Пример вывода иерархии дерева объектов.
Object tree
root
    object_1
        object_7
    object_2
        object_4
            object_7
        object_5
        object_3
    object_3
object_2/object_4     Object name: object_4
Object is set: object_2
//object_5     Object name: object_5
/object_15     Object is not found
.     Object name: object_2
object_4/object_7     Object name: object_7
